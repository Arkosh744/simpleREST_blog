// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	audit "github.com/Arkosh744/grpc-audit-log/pkg/domain"
	domain "github.com/Arkosh744/simpleREST_blog/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockPasswordHasher is a mock of PasswordHasher interface.
type MockPasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordHasherMockRecorder
}

// MockPasswordHasherMockRecorder is the mock recorder for MockPasswordHasher.
type MockPasswordHasherMockRecorder struct {
	mock *MockPasswordHasher
}

// NewMockPasswordHasher creates a new mock instance.
func NewMockPasswordHasher(ctrl *gomock.Controller) *MockPasswordHasher {
	mock := &MockPasswordHasher{ctrl: ctrl}
	mock.recorder = &MockPasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordHasher) EXPECT() *MockPasswordHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockPasswordHasher) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockPasswordHasherMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockPasswordHasher)(nil).Hash), password)
}

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsersRepository) Create(ctx context.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersRepository)(nil).Create), ctx, user)
}

// GetByCredentials mocks base method.
func (m *MockUsersRepository) GetByCredentials(ctx context.Context, email, password string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCredentials", ctx, email, password)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCredentials indicates an expected call of GetByCredentials.
func (mr *MockUsersRepositoryMockRecorder) GetByCredentials(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCredentials", reflect.TypeOf((*MockUsersRepository)(nil).GetByCredentials), ctx, email, password)
}

// MockTokensRepository is a mock of TokensRepository interface.
type MockTokensRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokensRepositoryMockRecorder
}

// MockTokensRepositoryMockRecorder is the mock recorder for MockTokensRepository.
type MockTokensRepositoryMockRecorder struct {
	mock *MockTokensRepository
}

// NewMockTokensRepository creates a new mock instance.
func NewMockTokensRepository(ctrl *gomock.Controller) *MockTokensRepository {
	mock := &MockTokensRepository{ctrl: ctrl}
	mock.recorder = &MockTokensRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokensRepository) EXPECT() *MockTokensRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTokensRepository) Create(ctx context.Context, token domain.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTokensRepositoryMockRecorder) Create(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTokensRepository)(nil).Create), ctx, token)
}

// Get mocks base method.
func (m *MockTokensRepository) Get(ctx context.Context, token string) (domain.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(domain.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokensRepositoryMockRecorder) Get(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokensRepository)(nil).Get), ctx, token)
}

// MockAuditClient is a mock of AuditClient interface.
type MockAuditClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuditClientMockRecorder
}

// MockAuditClientMockRecorder is the mock recorder for MockAuditClient.
type MockAuditClientMockRecorder struct {
	mock *MockAuditClient
}

// NewMockAuditClient creates a new mock instance.
func NewMockAuditClient(ctrl *gomock.Controller) *MockAuditClient {
	mock := &MockAuditClient{ctrl: ctrl}
	mock.recorder = &MockAuditClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditClient) EXPECT() *MockAuditClientMockRecorder {
	return m.recorder
}

// SendLogRequest mocks base method.
func (m *MockAuditClient) SendLogRequest(ctx context.Context, req audit.LogItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLogRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLogRequest indicates an expected call of SendLogRequest.
func (mr *MockAuditClientMockRecorder) SendLogRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLogRequest", reflect.TypeOf((*MockAuditClient)(nil).SendLogRequest), ctx, req)
}
